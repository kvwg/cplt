// **********************************************************************
// This file was generated by a TARS parser!
// TARS version 1.0.1.
// **********************************************************************

#ifndef __NODEF_H_
#define __NODEF_H_

#include <map>
#include <string>
#include <vector>
#include "tup/Tars.h"
using namespace std;
#include "servant/ServantProxy.h"
#include "servant/Servant.h"
#include "promise/promise.h"


namespace tars
{
    struct ServerInfo : public tars::TarsStructBase
    {
    public:
        static string className()
        {
            return "tars.ServerInfo";
        }
        static string MD5()
        {
            return "34368b1d85d52126f8efa6e27af8f151";
        }
        ServerInfo()
        :application(""),serverName(""),pid(0),adapter("")
        {
        }
        void resetDefautlt()
        {
            application = "";
            serverName = "";
            pid = 0;
            adapter = "";
        }
        template<typename WriterT>
        void writeTo(tars::TarsOutputStream<WriterT>& _os) const
        {
            _os.write(application, 0);
            _os.write(serverName, 1);
            _os.write(pid, 2);
            if (adapter != "")
            {
                _os.write(adapter, 3);
            }
        }
        template<typename ReaderT>
        void readFrom(tars::TarsInputStream<ReaderT>& _is)
        {
            resetDefautlt();
            _is.read(application, 0, true);
            _is.read(serverName, 1, true);
            _is.read(pid, 2, true);
            _is.read(adapter, 3, false);
        }
        ostream& display(ostream& _os, int _level=0) const
        {
            tars::TarsDisplayer _ds(_os, _level);
            _ds.display(application,"application");
            _ds.display(serverName,"serverName");
            _ds.display(pid,"pid");
            _ds.display(adapter,"adapter");
            return _os;
        }
        ostream& displaySimple(ostream& _os, int _level=0) const
        {
            tars::TarsDisplayer _ds(_os, _level);
            _ds.displaySimple(application, true);
            _ds.displaySimple(serverName, true);
            _ds.displaySimple(pid, true);
            _ds.displaySimple(adapter, false);
            return _os;
        }
    public:
        std::string application;
        std::string serverName;
        tars::Int32 pid;
        std::string adapter;
    };
    inline bool operator==(const ServerInfo&l, const ServerInfo&r)
    {
        return l.application == r.application && l.serverName == r.serverName && l.pid == r.pid && l.adapter == r.adapter;
    }
    inline bool operator!=(const ServerInfo&l, const ServerInfo&r)
    {
        return !(l == r);
    }


    /* callback of async proxy for client */
    class ServerFPrxCallback: public tars::ServantProxyCallback
    {
    public:
        virtual ~ServerFPrxCallback(){}
        virtual void callback_keepAlive(tars::Int32 ret)
        { throw std::runtime_error("callback_keepAlive() override incorrect."); }
        virtual void callback_keepAlive_exception(tars::Int32 ret)
        { throw std::runtime_error("callback_keepAlive_exception() override incorrect."); }

        virtual void callback_reportVersion(tars::Int32 ret)
        { throw std::runtime_error("callback_reportVersion() override incorrect."); }
        virtual void callback_reportVersion_exception(tars::Int32 ret)
        { throw std::runtime_error("callback_reportVersion_exception() override incorrect."); }

    public:
        virtual const map<std::string, std::string> & getResponseContext() const
        {
            CallbackThreadData * pCbtd = CallbackThreadData::getData();
            assert(pCbtd != NULL);

            if(!pCbtd->getContextValid())
            {
                throw TC_Exception("cann't get response context");
            }
            return pCbtd->getResponseContext();
        }

    public:
        virtual int onDispatch(tars::ReqMessagePtr msg)
        {
            static ::std::string __ServerF_all[]=
            {
                "keepAlive",
                "reportVersion"
            };
            pair<string*, string*> r = equal_range(__ServerF_all, __ServerF_all+2, string(msg->request.sFuncName));
            if(r.first == r.second) return tars::TARSSERVERNOFUNCERR;
            switch(r.first - __ServerF_all)
            {
                case 0:
                {
                    if (msg->response.iRet != tars::TARSSERVERSUCCESS)
                    {
                        callback_keepAlive_exception(msg->response.iRet);

                        return msg->response.iRet;
                    }
                    tars::TarsInputStream<tars::BufferReader> _is;

                    _is.setBuffer(msg->response.sBuffer);
                    tars::Int32 _ret;
                    _is.read(_ret, 0, true);

                    CallbackThreadData * pCbtd = CallbackThreadData::getData();
                    assert(pCbtd != NULL);

                    pCbtd->setResponseContext(msg->response.context);

                    callback_keepAlive(_ret);

                    pCbtd->delResponseContext();

                    return tars::TARSSERVERSUCCESS;

                }
                case 1:
                {
                    if (msg->response.iRet != tars::TARSSERVERSUCCESS)
                    {
                        callback_reportVersion_exception(msg->response.iRet);

                        return msg->response.iRet;
                    }
                    tars::TarsInputStream<tars::BufferReader> _is;

                    _is.setBuffer(msg->response.sBuffer);
                    tars::Int32 _ret;
                    _is.read(_ret, 0, true);

                    CallbackThreadData * pCbtd = CallbackThreadData::getData();
                    assert(pCbtd != NULL);

                    pCbtd->setResponseContext(msg->response.context);

                    callback_reportVersion(_ret);

                    pCbtd->delResponseContext();

                    return tars::TARSSERVERSUCCESS;

                }
            }
            return tars::TARSSERVERNOFUNCERR;
        }

    };
    typedef tars::TC_AutoPtr<ServerFPrxCallback> ServerFPrxCallbackPtr;

    /* callback of promise async proxy for client */
    class ServerFPrxCallbackPromise: public tars::ServantProxyCallback
    {
    public:
        virtual ~ServerFPrxCallbackPromise(){}
    public:
        struct PromisekeepAlive: virtual public TC_HandleBase
        {
        public:
            tars::Int32 _ret;
            map<std::string, std::string> _mRspContext;
        };
        
        typedef tars::TC_AutoPtr< ServerFPrxCallbackPromise::PromisekeepAlive > PromisekeepAlivePtr;

        ServerFPrxCallbackPromise(const promise::Promise< ServerFPrxCallbackPromise::PromisekeepAlivePtr > &promise)
        : _promise_keepAlive(promise)
        {}
        
        virtual void callback_keepAlive(const ServerFPrxCallbackPromise::PromisekeepAlivePtr &ptr)
        {
            _promise_keepAlive.setValue(ptr);
        }
        virtual void callback_keepAlive_exception(tars::Int32 ret)
        {
            std::string str("");
            str += "Function:keepAlive_exception|Ret:";
            str += TC_Common::tostr(ret);
            _promise_keepAlive.setException(promise::copyException(str, ret));
        }

    protected:
        promise::Promise< ServerFPrxCallbackPromise::PromisekeepAlivePtr > _promise_keepAlive;

    public:
        struct PromisereportVersion: virtual public TC_HandleBase
        {
        public:
            tars::Int32 _ret;
            map<std::string, std::string> _mRspContext;
        };
        
        typedef tars::TC_AutoPtr< ServerFPrxCallbackPromise::PromisereportVersion > PromisereportVersionPtr;

        ServerFPrxCallbackPromise(const promise::Promise< ServerFPrxCallbackPromise::PromisereportVersionPtr > &promise)
        : _promise_reportVersion(promise)
        {}
        
        virtual void callback_reportVersion(const ServerFPrxCallbackPromise::PromisereportVersionPtr &ptr)
        {
            _promise_reportVersion.setValue(ptr);
        }
        virtual void callback_reportVersion_exception(tars::Int32 ret)
        {
            std::string str("");
            str += "Function:reportVersion_exception|Ret:";
            str += TC_Common::tostr(ret);
            _promise_reportVersion.setException(promise::copyException(str, ret));
        }

    protected:
        promise::Promise< ServerFPrxCallbackPromise::PromisereportVersionPtr > _promise_reportVersion;

    public:
        virtual int onDispatch(tars::ReqMessagePtr msg)
        {
            static ::std::string __ServerF_all[]=
            {
                "keepAlive",
                "reportVersion"
            };

            pair<string*, string*> r = equal_range(__ServerF_all, __ServerF_all+2, string(msg->request.sFuncName));
            if(r.first == r.second) return tars::TARSSERVERNOFUNCERR;
            switch(r.first - __ServerF_all)
            {
                case 0:
                {
                    if (msg->response.iRet != tars::TARSSERVERSUCCESS)
                    {
                        callback_keepAlive_exception(msg->response.iRet);

                        return msg->response.iRet;
                    }
                    tars::TarsInputStream<tars::BufferReader> _is;

                    _is.setBuffer(msg->response.sBuffer);

                    ServerFPrxCallbackPromise::PromisekeepAlivePtr ptr = new ServerFPrxCallbackPromise::PromisekeepAlive();

                    try
                    {
                        _is.read(ptr->_ret, 0, true);

                    }
                    catch(std::exception &ex)
                    {
                        callback_keepAlive_exception(tars::TARSCLIENTDECODEERR);

                        return tars::TARSCLIENTDECODEERR;
                    }
                    catch(...)
                    {
                        callback_keepAlive_exception(tars::TARSCLIENTDECODEERR);

                        return tars::TARSCLIENTDECODEERR;
                    }

                    ptr->_mRspContext = msg->response.context;

                    callback_keepAlive(ptr);

                    return tars::TARSSERVERSUCCESS;

                }
                case 1:
                {
                    if (msg->response.iRet != tars::TARSSERVERSUCCESS)
                    {
                        callback_reportVersion_exception(msg->response.iRet);

                        return msg->response.iRet;
                    }
                    tars::TarsInputStream<tars::BufferReader> _is;

                    _is.setBuffer(msg->response.sBuffer);

                    ServerFPrxCallbackPromise::PromisereportVersionPtr ptr = new ServerFPrxCallbackPromise::PromisereportVersion();

                    try
                    {
                        _is.read(ptr->_ret, 0, true);

                    }
                    catch(std::exception &ex)
                    {
                        callback_reportVersion_exception(tars::TARSCLIENTDECODEERR);

                        return tars::TARSCLIENTDECODEERR;
                    }
                    catch(...)
                    {
                        callback_reportVersion_exception(tars::TARSCLIENTDECODEERR);

                        return tars::TARSCLIENTDECODEERR;
                    }

                    ptr->_mRspContext = msg->response.context;

                    callback_reportVersion(ptr);

                    return tars::TARSSERVERSUCCESS;

                }
            }
            return tars::TARSSERVERNOFUNCERR;
        }

    };
    typedef tars::TC_AutoPtr<ServerFPrxCallbackPromise> ServerFPrxCallbackPromisePtr;

    /* callback of coroutine async proxy for client */
    class ServerFCoroPrxCallback: public ServerFPrxCallback
    {
    public:
        virtual ~ServerFCoroPrxCallback(){}
    public:
        virtual const map<std::string, std::string> & getResponseContext() const { return _mRspContext; }

        virtual void setResponseContext(const map<std::string, std::string> &mContext) { _mRspContext = mContext; }

    public:
        int onDispatch(tars::ReqMessagePtr msg)
        {
            static ::std::string __ServerF_all[]=
            {
                "keepAlive",
                "reportVersion"
            };

            pair<string*, string*> r = equal_range(__ServerF_all, __ServerF_all+2, string(msg->request.sFuncName));
            if(r.first == r.second) return tars::TARSSERVERNOFUNCERR;
            switch(r.first - __ServerF_all)
            {
                case 0:
                {
                    if (msg->response.iRet != tars::TARSSERVERSUCCESS)
                    {
                        callback_keepAlive_exception(msg->response.iRet);

                        return msg->response.iRet;
                    }
                    tars::TarsInputStream<tars::BufferReader> _is;

                    _is.setBuffer(msg->response.sBuffer);
                    try
                    {
                        tars::Int32 _ret;
                        _is.read(_ret, 0, true);

                        setResponseContext(msg->response.context);

                        callback_keepAlive(_ret);

                    }
                    catch(std::exception &ex)
                    {
                        callback_keepAlive_exception(tars::TARSCLIENTDECODEERR);

                        return tars::TARSCLIENTDECODEERR;
                    }
                    catch(...)
                    {
                        callback_keepAlive_exception(tars::TARSCLIENTDECODEERR);

                        return tars::TARSCLIENTDECODEERR;
                    }

                    return tars::TARSSERVERSUCCESS;

                }
                case 1:
                {
                    if (msg->response.iRet != tars::TARSSERVERSUCCESS)
                    {
                        callback_reportVersion_exception(msg->response.iRet);

                        return msg->response.iRet;
                    }
                    tars::TarsInputStream<tars::BufferReader> _is;

                    _is.setBuffer(msg->response.sBuffer);
                    try
                    {
                        tars::Int32 _ret;
                        _is.read(_ret, 0, true);

                        setResponseContext(msg->response.context);

                        callback_reportVersion(_ret);

                    }
                    catch(std::exception &ex)
                    {
                        callback_reportVersion_exception(tars::TARSCLIENTDECODEERR);

                        return tars::TARSCLIENTDECODEERR;
                    }
                    catch(...)
                    {
                        callback_reportVersion_exception(tars::TARSCLIENTDECODEERR);

                        return tars::TARSCLIENTDECODEERR;
                    }

                    return tars::TARSSERVERSUCCESS;

                }
            }
            return tars::TARSSERVERNOFUNCERR;
        }

    protected:
        map<std::string, std::string> _mRspContext;
    };
    typedef tars::TC_AutoPtr<ServerFCoroPrxCallback> ServerFCoroPrxCallbackPtr;

    /* proxy for client */
    class ServerFProxy : public tars::ServantProxy
    {
    public:
        typedef map<string, string> TARS_CONTEXT;
        tars::Int32 keepAlive(const tars::ServerInfo & serverInfo,const map<string, string> &context = TARS_CONTEXT(),map<string, string> * pResponseContext = NULL)
        {
            tars::TarsOutputStream<tars::BufferWriter> _os;
            _os.write(serverInfo, 1);
            tars::ResponsePacket rep;
            std::map<string, string> _mStatus;
            tars_invoke(tars::TARSNORMAL,"keepAlive", _os.getByteBuffer(), context, _mStatus, rep);
            if(pResponseContext)
            {
                *pResponseContext = rep.context;
            }

            tars::TarsInputStream<tars::BufferReader> _is;
            _is.setBuffer(rep.sBuffer);
            tars::Int32 _ret;
            _is.read(_ret, 0, true);
            return _ret;
        }

        void async_keepAlive(ServerFPrxCallbackPtr callback,const tars::ServerInfo &serverInfo,const map<string, string>& context = TARS_CONTEXT())
        {
            tars::TarsOutputStream<tars::BufferWriter> _os;
            _os.write(serverInfo, 1);
            std::map<string, string> _mStatus;
            tars_invoke_async(tars::TARSNORMAL,"keepAlive", _os.getByteBuffer(), context, _mStatus, callback);
        }
        
        promise::Future< ServerFPrxCallbackPromise::PromisekeepAlivePtr > promise_async_keepAlive(const tars::ServerInfo &serverInfo,const map<string, string>& context)
        {
            promise::Promise< ServerFPrxCallbackPromise::PromisekeepAlivePtr > promise;
            ServerFPrxCallbackPromisePtr callback = new ServerFPrxCallbackPromise(promise);

            tars::TarsOutputStream<tars::BufferWriter> _os;
            _os.write(serverInfo, 1);
            std::map<string, string> _mStatus;
            tars_invoke_async(tars::TARSNORMAL,"keepAlive", _os.getByteBuffer(), context, _mStatus, callback);

            return promise.getFuture();
        }

        void coro_keepAlive(ServerFCoroPrxCallbackPtr callback,const tars::ServerInfo &serverInfo,const map<string, string>& context = TARS_CONTEXT())
        {
            tars::TarsOutputStream<tars::BufferWriter> _os;
            _os.write(serverInfo, 1);
            std::map<string, string> _mStatus;
            tars_invoke_async(tars::TARSNORMAL,"keepAlive", _os.getByteBuffer(), context, _mStatus, callback, true);
        }

        tars::Int32 reportVersion(const std::string & app,const std::string & serverName,const std::string & version,const map<string, string> &context = TARS_CONTEXT(),map<string, string> * pResponseContext = NULL)
        {
            tars::TarsOutputStream<tars::BufferWriter> _os;
            _os.write(app, 1);
            _os.write(serverName, 2);
            _os.write(version, 3);
            tars::ResponsePacket rep;
            std::map<string, string> _mStatus;
            tars_invoke(tars::TARSNORMAL,"reportVersion", _os.getByteBuffer(), context, _mStatus, rep);
            if(pResponseContext)
            {
                *pResponseContext = rep.context;
            }

            tars::TarsInputStream<tars::BufferReader> _is;
            _is.setBuffer(rep.sBuffer);
            tars::Int32 _ret;
            _is.read(_ret, 0, true);
            return _ret;
        }

        void async_reportVersion(ServerFPrxCallbackPtr callback,const std::string &app,const std::string &serverName,const std::string &version,const map<string, string>& context = TARS_CONTEXT())
        {
            tars::TarsOutputStream<tars::BufferWriter> _os;
            _os.write(app, 1);
            _os.write(serverName, 2);
            _os.write(version, 3);
            std::map<string, string> _mStatus;
            tars_invoke_async(tars::TARSNORMAL,"reportVersion", _os.getByteBuffer(), context, _mStatus, callback);
        }
        
        promise::Future< ServerFPrxCallbackPromise::PromisereportVersionPtr > promise_async_reportVersion(const std::string &app,const std::string &serverName,const std::string &version,const map<string, string>& context)
        {
            promise::Promise< ServerFPrxCallbackPromise::PromisereportVersionPtr > promise;
            ServerFPrxCallbackPromisePtr callback = new ServerFPrxCallbackPromise(promise);

            tars::TarsOutputStream<tars::BufferWriter> _os;
            _os.write(app, 1);
            _os.write(serverName, 2);
            _os.write(version, 3);
            std::map<string, string> _mStatus;
            tars_invoke_async(tars::TARSNORMAL,"reportVersion", _os.getByteBuffer(), context, _mStatus, callback);

            return promise.getFuture();
        }

        void coro_reportVersion(ServerFCoroPrxCallbackPtr callback,const std::string &app,const std::string &serverName,const std::string &version,const map<string, string>& context = TARS_CONTEXT())
        {
            tars::TarsOutputStream<tars::BufferWriter> _os;
            _os.write(app, 1);
            _os.write(serverName, 2);
            _os.write(version, 3);
            std::map<string, string> _mStatus;
            tars_invoke_async(tars::TARSNORMAL,"reportVersion", _os.getByteBuffer(), context, _mStatus, callback, true);
        }

        ServerFProxy* tars_hash(int64_t key)
        {
            return (ServerFProxy*)ServantProxy::tars_hash(key);
        }

        ServerFProxy* tars_consistent_hash(int64_t key)
        {
            return (ServerFProxy*)ServantProxy::tars_consistent_hash(key);
        }

        ServerFProxy* tars_set_timeout(int msecond)
        {
            return (ServerFProxy*)ServantProxy::tars_set_timeout(msecond);
        }

    };
    typedef tars::TC_AutoPtr<ServerFProxy> ServerFPrx;

    /* servant for server */
    class ServerF : public tars::Servant
    {
    public:
        virtual ~ServerF(){}
        virtual tars::Int32 keepAlive(const tars::ServerInfo & serverInfo,tars::TarsCurrentPtr current) = 0;
        static void async_response_keepAlive(tars::TarsCurrentPtr current, tars::Int32 _ret)
        {
            if (current->getRequestVersion() == TUPVERSION )
            {
                UniAttribute<tars::BufferWriter, tars::BufferReader>  tarsAttr;
                tarsAttr.setVersion(current->getRequestVersion());
                tarsAttr.put("", _ret);

                vector<char> sTupResponseBuffer;
                tarsAttr.encode(sTupResponseBuffer);
                current->sendResponse(tars::TARSSERVERSUCCESS, sTupResponseBuffer);
            }
            else
            {
                tars::TarsOutputStream<tars::BufferWriter> _os;
                _os.write(_ret, 0);

                current->sendResponse(tars::TARSSERVERSUCCESS, _os.getByteBuffer());
            }
        }

        virtual tars::Int32 reportVersion(const std::string & app,const std::string & serverName,const std::string & version,tars::TarsCurrentPtr current) = 0;
        static void async_response_reportVersion(tars::TarsCurrentPtr current, tars::Int32 _ret)
        {
            if (current->getRequestVersion() == TUPVERSION )
            {
                UniAttribute<tars::BufferWriter, tars::BufferReader>  tarsAttr;
                tarsAttr.setVersion(current->getRequestVersion());
                tarsAttr.put("", _ret);

                vector<char> sTupResponseBuffer;
                tarsAttr.encode(sTupResponseBuffer);
                current->sendResponse(tars::TARSSERVERSUCCESS, sTupResponseBuffer);
            }
            else
            {
                tars::TarsOutputStream<tars::BufferWriter> _os;
                _os.write(_ret, 0);

                current->sendResponse(tars::TARSSERVERSUCCESS, _os.getByteBuffer());
            }
        }

    public:
        int onDispatch(tars::TarsCurrentPtr _current, vector<char> &_sResponseBuffer)
        {
            static ::std::string __tars__ServerF_all[]=
            {
                "keepAlive",
                "reportVersion"
            };

            pair<string*, string*> r = equal_range(__tars__ServerF_all, __tars__ServerF_all+2, _current->getFuncName());
            if(r.first == r.second) return tars::TARSSERVERNOFUNCERR;
            switch(r.first - __tars__ServerF_all)
            {
                case 0:
                {
                    tars::TarsInputStream<tars::BufferReader> _is;
                    _is.setBuffer(_current->getRequestBuffer());
                    tars::ServerInfo serverInfo;
                    if (_current->getRequestVersion() == TUPVERSION)
                    {
                        UniAttribute<tars::BufferWriter, tars::BufferReader>  tarsAttr;
                        tarsAttr.setVersion(_current->getRequestVersion());
                        tarsAttr.decode(_current->getRequestBuffer());
                        tarsAttr.get("serverInfo", serverInfo);
                    }
                    else
                    {
                        _is.read(serverInfo, 1, true);
                    }
                    tars::Int32 _ret = keepAlive(serverInfo, _current);
                    if(_current->isResponse())
                    {
                        if (_current->getRequestVersion() == TUPVERSION )
                        {
                            UniAttribute<tars::BufferWriter, tars::BufferReader>  tarsAttr;
                            tarsAttr.setVersion(_current->getRequestVersion());
                            tarsAttr.put("", _ret);
                            tarsAttr.encode(_sResponseBuffer);
                        }
                        else
                        {
                            tars::TarsOutputStream<tars::BufferWriter> _os;
                            _os.write(_ret, 0);
                            _os.swap(_sResponseBuffer);
                        }
                    }
                    return tars::TARSSERVERSUCCESS;

                }
                case 1:
                {
                    tars::TarsInputStream<tars::BufferReader> _is;
                    _is.setBuffer(_current->getRequestBuffer());
                    std::string app;
                    std::string serverName;
                    std::string version;
                    if (_current->getRequestVersion() == TUPVERSION)
                    {
                        UniAttribute<tars::BufferWriter, tars::BufferReader>  tarsAttr;
                        tarsAttr.setVersion(_current->getRequestVersion());
                        tarsAttr.decode(_current->getRequestBuffer());
                        tarsAttr.get("app", app);
                        tarsAttr.get("serverName", serverName);
                        tarsAttr.get("version", version);
                    }
                    else
                    {
                        _is.read(app, 1, true);
                        _is.read(serverName, 2, true);
                        _is.read(version, 3, true);
                    }
                    tars::Int32 _ret = reportVersion(app,serverName,version, _current);
                    if(_current->isResponse())
                    {
                        if (_current->getRequestVersion() == TUPVERSION )
                        {
                            UniAttribute<tars::BufferWriter, tars::BufferReader>  tarsAttr;
                            tarsAttr.setVersion(_current->getRequestVersion());
                            tarsAttr.put("", _ret);
                            tarsAttr.encode(_sResponseBuffer);
                        }
                        else
                        {
                            tars::TarsOutputStream<tars::BufferWriter> _os;
                            _os.write(_ret, 0);
                            _os.swap(_sResponseBuffer);
                        }
                    }
                    return tars::TARSSERVERSUCCESS;

                }
            }
            return tars::TARSSERVERNOFUNCERR;
        }
    };


}



#endif
